//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Apptentive.Com.Android.Concurrent {

	// Metadata.xml XPath class reference: path="/api/package[@name='apptentive.com.android.concurrent']/class[@name='ExecutorQueue']"
	[global::Android.Runtime.Register ("apptentive/com/android/concurrent/ExecutorQueue", DoNotGenerateAcw=true)]
	public abstract partial class ExecutorQueue : global::Java.Lang.Object, global::Apptentive.Com.Android.Concurrent.IExecutor {
		// Metadata.xml XPath class reference: path="/api/package[@name='apptentive.com.android.concurrent']/class[@name='ExecutorQueue.Companion']"
		[global::Android.Runtime.Register ("apptentive/com/android/concurrent/ExecutorQueue$Companion", DoNotGenerateAcw=true)]
		public sealed partial class Companion : global::Java.Lang.Object {
			static readonly JniPeerMembers _members = new XAPeerMembers ("apptentive/com/android/concurrent/ExecutorQueue$Companion", typeof (Companion));

			internal static IntPtr class_ref {
				get { return _members.JniPeerType.PeerReference.Handle; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			public override global::Java.Interop.JniPeerMembers JniPeerMembers {
				get { return _members; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			protected override IntPtr ThresholdClass {
				get { return _members.JniPeerType.PeerReference.Handle; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			protected override global::System.Type ThresholdType {
				get { return _members.ManagedPeerType; }
			}

			internal Companion (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
			{
			}

			public unsafe global::Apptentive.Com.Android.Concurrent.ExecutorQueue MainQueue {
				// Metadata.xml XPath method reference: path="/api/package[@name='apptentive.com.android.concurrent']/class[@name='ExecutorQueue.Companion']/method[@name='getMainQueue' and count(parameter)=0]"
				[Register ("getMainQueue", "()Lapptentive/com/android/concurrent/ExecutorQueue;", "")]
				get {
					const string __id = "getMainQueue.()Lapptentive/com/android/concurrent/ExecutorQueue;";
					try {
						var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, null);
						return global::Java.Lang.Object.GetObject<global::Apptentive.Com.Android.Concurrent.ExecutorQueue> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
					} finally {
					}
				}
			}

			// Metadata.xml XPath method reference: path="/api/package[@name='apptentive.com.android.concurrent']/class[@name='ExecutorQueue.Companion']/method[@name='createConcurrentQueue' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.Integer']]"
			[Register ("createConcurrentQueue", "(Ljava/lang/String;Ljava/lang/Integer;)Lapptentive/com/android/concurrent/ExecutorQueue;", "")]
			public unsafe global::Apptentive.Com.Android.Concurrent.ExecutorQueue CreateConcurrentQueue (string name, global::Java.Lang.Integer maxConcurrentTasks)
			{
				const string __id = "createConcurrentQueue.(Ljava/lang/String;Ljava/lang/Integer;)Lapptentive/com/android/concurrent/ExecutorQueue;";
				IntPtr native_name = JNIEnv.NewString ((string)name);
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [2];
					__args [0] = new JniArgumentValue (native_name);
					__args [1] = new JniArgumentValue ((maxConcurrentTasks == null) ? IntPtr.Zero : ((global::Java.Lang.Object) maxConcurrentTasks).Handle);
					var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, __args);
					return global::Java.Lang.Object.GetObject<global::Apptentive.Com.Android.Concurrent.ExecutorQueue> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
					JNIEnv.DeleteLocalRef (native_name);
					global::System.GC.KeepAlive (maxConcurrentTasks);
				}
			}

			// Metadata.xml XPath method reference: path="/api/package[@name='apptentive.com.android.concurrent']/class[@name='ExecutorQueue.Companion']/method[@name='createSerialQueue' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
			[Register ("createSerialQueue", "(Ljava/lang/String;)Lapptentive/com/android/concurrent/ExecutorQueue;", "")]
			public unsafe global::Apptentive.Com.Android.Concurrent.ExecutorQueue CreateSerialQueue (string name)
			{
				const string __id = "createSerialQueue.(Ljava/lang/String;)Lapptentive/com/android/concurrent/ExecutorQueue;";
				IntPtr native_name = JNIEnv.NewString ((string)name);
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (native_name);
					var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, __args);
					return global::Java.Lang.Object.GetObject<global::Apptentive.Com.Android.Concurrent.ExecutorQueue> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
					JNIEnv.DeleteLocalRef (native_name);
				}
			}

		}

		static readonly JniPeerMembers _members = new XAPeerMembers ("apptentive/com/android/concurrent/ExecutorQueue", typeof (ExecutorQueue));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected ExecutorQueue (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='apptentive.com.android.concurrent']/class[@name='ExecutorQueue']/constructor[@name='ExecutorQueue' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register (".ctor", "(Ljava/lang/String;)V", "")]
		public unsafe ExecutorQueue (string name) : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "(Ljava/lang/String;)V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			IntPtr native_name = JNIEnv.NewString ((string)name);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_name);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_name);
			}
		}

		static Delegate cb_isCurrent;
#pragma warning disable 0169
		static Delegate GetIsCurrentHandler ()
		{
			if (cb_isCurrent == null)
				cb_isCurrent = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_Z (n_IsCurrent));
			return cb_isCurrent;
		}

		static bool n_IsCurrent (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Apptentive.Com.Android.Concurrent.ExecutorQueue> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			return __this.IsCurrent;
		}
#pragma warning restore 0169

		public abstract bool IsCurrent {
			// Metadata.xml XPath method reference: path="/api/package[@name='apptentive.com.android.concurrent']/class[@name='ExecutorQueue']/method[@name='isCurrent' and count(parameter)=0]"
			[Register ("isCurrent", "()Z", "GetIsCurrentHandler")]
			get; 
		}

		static Delegate cb_stop;
#pragma warning disable 0169
		static Delegate GetStopHandler ()
		{
			if (cb_stop == null)
				cb_stop = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_V (n_Stop));
			return cb_stop;
		}

		static void n_Stop (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Apptentive.Com.Android.Concurrent.ExecutorQueue> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			__this.Stop ();
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='apptentive.com.android.concurrent']/class[@name='ExecutorQueue']/method[@name='stop' and count(parameter)=0]"
		[Register ("stop", "()V", "GetStopHandler")]
		public abstract void Stop ();

	}

	[global::Android.Runtime.Register ("apptentive/com/android/concurrent/ExecutorQueue", DoNotGenerateAcw=true)]
	internal partial class ExecutorQueueInvoker : ExecutorQueue {
		public ExecutorQueueInvoker (IntPtr handle, JniHandleOwnership transfer) : base (handle, transfer)
		{
		}

		static readonly JniPeerMembers _members = new XAPeerMembers ("apptentive/com/android/concurrent/ExecutorQueue", typeof (ExecutorQueueInvoker));

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		public override unsafe bool IsCurrent {
			// Metadata.xml XPath method reference: path="/api/package[@name='apptentive.com.android.concurrent']/class[@name='ExecutorQueue']/method[@name='isCurrent' and count(parameter)=0]"
			[Register ("isCurrent", "()Z", "GetIsCurrentHandler")]
			get {
				const string __id = "isCurrent.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='apptentive.com.android.concurrent']/class[@name='ExecutorQueue']/method[@name='stop' and count(parameter)=0]"
		[Register ("stop", "()V", "GetStopHandler")]
		public override unsafe void Stop ()
		{
			const string __id = "stop.()V";
			try {
				_members.InstanceMethods.InvokeAbstractVoidMethod (__id, this, null);
			} finally {
			}
		}

	}
}
