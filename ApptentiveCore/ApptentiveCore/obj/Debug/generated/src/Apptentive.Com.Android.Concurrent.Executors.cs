//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Apptentive.Com.Android.Concurrent {

	// Metadata.xml XPath class reference: path="/api/package[@name='apptentive.com.android.concurrent']/class[@name='Executors']"
	[global::Android.Runtime.Register ("apptentive/com/android/concurrent/Executors", DoNotGenerateAcw=true)]
	public sealed partial class Executors : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("apptentive/com/android/concurrent/Executors", typeof (Executors));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		internal Executors (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='apptentive.com.android.concurrent']/class[@name='Executors']/constructor[@name='Executors' and count(parameter)=2 and parameter[1][@type='apptentive.com.android.concurrent.Executor'] and parameter[2][@type='apptentive.com.android.concurrent.Executor']]"
		[Register (".ctor", "(Lapptentive/com/android/concurrent/Executor;Lapptentive/com/android/concurrent/Executor;)V", "")]
		public unsafe Executors (global::Apptentive.Com.Android.Concurrent.IExecutor state, global::Apptentive.Com.Android.Concurrent.IExecutor main) : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "(Lapptentive/com/android/concurrent/Executor;Lapptentive/com/android/concurrent/Executor;)V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((state == null) ? IntPtr.Zero : ((global::Java.Lang.Object) state).Handle);
				__args [1] = new JniArgumentValue ((main == null) ? IntPtr.Zero : ((global::Java.Lang.Object) main).Handle);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (state);
				global::System.GC.KeepAlive (main);
			}
		}

		public unsafe global::Apptentive.Com.Android.Concurrent.IExecutor Main {
			// Metadata.xml XPath method reference: path="/api/package[@name='apptentive.com.android.concurrent']/class[@name='Executors']/method[@name='getMain' and count(parameter)=0]"
			[Register ("getMain", "()Lapptentive/com/android/concurrent/Executor;", "")]
			get {
				const string __id = "getMain.()Lapptentive/com/android/concurrent/Executor;";
				try {
					var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, null);
					return global::Java.Lang.Object.GetObject<global::Apptentive.Com.Android.Concurrent.IExecutor> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
		}

		public unsafe global::Apptentive.Com.Android.Concurrent.IExecutor State {
			// Metadata.xml XPath method reference: path="/api/package[@name='apptentive.com.android.concurrent']/class[@name='Executors']/method[@name='getState' and count(parameter)=0]"
			[Register ("getState", "()Lapptentive/com/android/concurrent/Executor;", "")]
			get {
				const string __id = "getState.()Lapptentive/com/android/concurrent/Executor;";
				try {
					var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, null);
					return global::Java.Lang.Object.GetObject<global::Apptentive.Com.Android.Concurrent.IExecutor> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='apptentive.com.android.concurrent']/class[@name='Executors']/method[@name='component1' and count(parameter)=0]"
		[Register ("component1", "()Lapptentive/com/android/concurrent/Executor;", "")]
		public unsafe global::Apptentive.Com.Android.Concurrent.IExecutor Component1 ()
		{
			const string __id = "component1.()Lapptentive/com/android/concurrent/Executor;";
			try {
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, null);
				return global::Java.Lang.Object.GetObject<global::Apptentive.Com.Android.Concurrent.IExecutor> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='apptentive.com.android.concurrent']/class[@name='Executors']/method[@name='component2' and count(parameter)=0]"
		[Register ("component2", "()Lapptentive/com/android/concurrent/Executor;", "")]
		public unsafe global::Apptentive.Com.Android.Concurrent.IExecutor Component2 ()
		{
			const string __id = "component2.()Lapptentive/com/android/concurrent/Executor;";
			try {
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, null);
				return global::Java.Lang.Object.GetObject<global::Apptentive.Com.Android.Concurrent.IExecutor> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='apptentive.com.android.concurrent']/class[@name='Executors']/method[@name='copy' and count(parameter)=2 and parameter[1][@type='apptentive.com.android.concurrent.Executor'] and parameter[2][@type='apptentive.com.android.concurrent.Executor']]"
		[Register ("copy", "(Lapptentive/com/android/concurrent/Executor;Lapptentive/com/android/concurrent/Executor;)Lapptentive/com/android/concurrent/Executors;", "")]
		public unsafe global::Apptentive.Com.Android.Concurrent.Executors Copy (global::Apptentive.Com.Android.Concurrent.IExecutor state, global::Apptentive.Com.Android.Concurrent.IExecutor main)
		{
			const string __id = "copy.(Lapptentive/com/android/concurrent/Executor;Lapptentive/com/android/concurrent/Executor;)Lapptentive/com/android/concurrent/Executors;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((state == null) ? IntPtr.Zero : ((global::Java.Lang.Object) state).Handle);
				__args [1] = new JniArgumentValue ((main == null) ? IntPtr.Zero : ((global::Java.Lang.Object) main).Handle);
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, __args);
				return global::Java.Lang.Object.GetObject<global::Apptentive.Com.Android.Concurrent.Executors> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (state);
				global::System.GC.KeepAlive (main);
			}
		}

	}
}
