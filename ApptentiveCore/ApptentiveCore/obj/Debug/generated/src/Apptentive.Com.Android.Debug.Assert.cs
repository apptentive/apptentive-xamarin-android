//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Apptentive.Com.Android.Debug {

	// Metadata.xml XPath class reference: path="/api/package[@name='apptentive.com.android.debug']/class[@name='Assert']"
	[global::Android.Runtime.Register ("apptentive/com/android/debug/Assert", DoNotGenerateAcw=true)]
	public sealed partial class Assert : global::Java.Lang.Object {

		// Metadata.xml XPath field reference: path="/api/package[@name='apptentive.com.android.debug']/class[@name='Assert']/field[@name='INSTANCE']"
		[Register ("INSTANCE")]
		public static global::Apptentive.Com.Android.Debug.Assert Instance {
			get {
				const string __id = "INSTANCE.Lapptentive/com/android/debug/Assert;";

				var __v = _members.StaticFields.GetObjectValue (__id);
				return global::Java.Lang.Object.GetObject<global::Apptentive.Com.Android.Debug.Assert> (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
		}

		static readonly JniPeerMembers _members = new XAPeerMembers ("apptentive/com/android/debug/Assert", typeof (Assert));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		internal Assert (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='apptentive.com.android.debug']/class[@name='Assert']/method[@name='assertEqual' and count(parameter)=3 and parameter[1][@type='java.lang.Object'] and parameter[2][@type='java.lang.Object'] and parameter[3][@type='java.lang.String']]"
		[Register ("assertEqual", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/String;)V", "")]
		public unsafe void AssertEqual (global::Java.Lang.Object a, global::Java.Lang.Object b, string message)
		{
			const string __id = "assertEqual.(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/String;)V";
			IntPtr native_message = JNIEnv.NewString ((string)message);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue ((a == null) ? IntPtr.Zero : ((global::Java.Lang.Object) a).Handle);
				__args [1] = new JniArgumentValue ((b == null) ? IntPtr.Zero : ((global::Java.Lang.Object) b).Handle);
				__args [2] = new JniArgumentValue (native_message);
				_members.InstanceMethods.InvokeNonvirtualVoidMethod (__id, this, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_message);
				global::System.GC.KeepAlive (a);
				global::System.GC.KeepAlive (b);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='apptentive.com.android.debug']/class[@name='Assert']/method[@name='assertFalse' and count(parameter)=2 and parameter[1][@type='boolean'] and parameter[2][@type='java.lang.String']]"
		[Register ("assertFalse", "(ZLjava/lang/String;)V", "")]
		public unsafe void AssertFalse (bool condition, string message)
		{
			const string __id = "assertFalse.(ZLjava/lang/String;)V";
			IntPtr native_message = JNIEnv.NewString ((string)message);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (condition);
				__args [1] = new JniArgumentValue (native_message);
				_members.InstanceMethods.InvokeNonvirtualVoidMethod (__id, this, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_message);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='apptentive.com.android.debug']/class[@name='Assert']/method[@name='assertTrue' and count(parameter)=2 and parameter[1][@type='boolean'] and parameter[2][@type='java.lang.String']]"
		[Register ("assertTrue", "(ZLjava/lang/String;)V", "")]
		public unsafe void AssertTrue (bool condition, string message)
		{
			const string __id = "assertTrue.(ZLjava/lang/String;)V";
			IntPtr native_message = JNIEnv.NewString ((string)message);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (condition);
				__args [1] = new JniArgumentValue (native_message);
				_members.InstanceMethods.InvokeNonvirtualVoidMethod (__id, this, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_message);
			}
		}

	}
}
