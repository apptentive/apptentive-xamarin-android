//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Apptentive.Com.Android.Util {

	// Metadata.xml XPath class reference: path="/api/package[@name='apptentive.com.android.util']/class[@name='Log']"
	[global::Android.Runtime.Register ("apptentive/com/android/util/Log", DoNotGenerateAcw=true)]
	public sealed partial class Log : global::Java.Lang.Object {

		// Metadata.xml XPath field reference: path="/api/package[@name='apptentive.com.android.util']/class[@name='Log']/field[@name='INSTANCE']"
		[Register ("INSTANCE")]
		public static global::Apptentive.Com.Android.Util.Log Instance {
			get {
				const string __id = "INSTANCE.Lapptentive/com/android/util/Log;";

				var __v = _members.StaticFields.GetObjectValue (__id);
				return global::Java.Lang.Object.GetObject<global::Apptentive.Com.Android.Util.Log> (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
		}

		static readonly JniPeerMembers _members = new XAPeerMembers ("apptentive/com/android/util/Log", typeof (Log));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		internal Log (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		public unsafe global::Apptentive.Com.Android.Util.LogLevel LogLevel {
			// Metadata.xml XPath method reference: path="/api/package[@name='apptentive.com.android.util']/class[@name='Log']/method[@name='getLogLevel' and count(parameter)=0]"
			[Register ("getLogLevel", "()Lapptentive/com/android/util/LogLevel;", "")]
			get {
				const string __id = "getLogLevel.()Lapptentive/com/android/util/LogLevel;";
				try {
					var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, null);
					return global::Java.Lang.Object.GetObject<global::Apptentive.Com.Android.Util.LogLevel> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
			// Metadata.xml XPath method reference: path="/api/package[@name='apptentive.com.android.util']/class[@name='Log']/method[@name='setLogLevel' and count(parameter)=1 and parameter[1][@type='apptentive.com.android.util.LogLevel']]"
			[Register ("setLogLevel", "(Lapptentive/com/android/util/LogLevel;)V", "")]
			set {
				const string __id = "setLogLevel.(Lapptentive/com/android/util/LogLevel;)V";
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue ((value == null) ? IntPtr.Zero : ((global::Java.Lang.Object) value).Handle);
					_members.InstanceMethods.InvokeNonvirtualVoidMethod (__id, this, __args);
				} finally {
					global::System.GC.KeepAlive (value);
				}
			}
		}

		public unsafe global::ApptentiveCore.ILogger Logger {
			// Metadata.xml XPath method reference: path="/api/package[@name='apptentive.com.android.util']/class[@name='Log']/method[@name='getLogger' and count(parameter)=0]"
			[Register ("getLogger", "()Lapptentive/com/android/core/Logger;", "")]
			get {
				const string __id = "getLogger.()Lapptentive/com/android/core/Logger;";
				try {
					var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, null);
					return global::Java.Lang.Object.GetObject<global::ApptentiveCore.ILogger> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='apptentive.com.android.util']/class[@name='Log']/method[@name='canLog' and count(parameter)=1 and parameter[1][@type='apptentive.com.android.util.LogLevel']]"
		[Register ("canLog", "(Lapptentive/com/android/util/LogLevel;)Z", "")]
		public static unsafe bool CanLog (global::Apptentive.Com.Android.Util.LogLevel level)
		{
			const string __id = "canLog.(Lapptentive/com/android/util/LogLevel;)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((level == null) ? IntPtr.Zero : ((global::Java.Lang.Object) level).Handle);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (level);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='apptentive.com.android.util']/class[@name='Log']/method[@name='d' and count(parameter)=2 and parameter[1][@type='apptentive.com.android.util.LogTag'] and parameter[2][@type='java.lang.String']]"
		[Register ("d", "(Lapptentive/com/android/util/LogTag;Ljava/lang/String;)V", "")]
		public static unsafe void D (global::Apptentive.Com.Android.Util.LogTag tag, string message)
		{
			const string __id = "d.(Lapptentive/com/android/util/LogTag;Ljava/lang/String;)V";
			IntPtr native_message = JNIEnv.NewString ((string)message);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((tag == null) ? IntPtr.Zero : ((global::Java.Lang.Object) tag).Handle);
				__args [1] = new JniArgumentValue (native_message);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_message);
				global::System.GC.KeepAlive (tag);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='apptentive.com.android.util']/class[@name='Log']/method[@name='d' and count(parameter)=3 and parameter[1][@type='apptentive.com.android.util.LogTag'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='java.lang.Object...']]"
		[Register ("d", "(Lapptentive/com/android/util/LogTag;Ljava/lang/String;[Ljava/lang/Object;)V", "")]
		public static unsafe void D (global::Apptentive.Com.Android.Util.LogTag tag, string format, params global::Java.Lang.Object[] args)
		{
			const string __id = "d.(Lapptentive/com/android/util/LogTag;Ljava/lang/String;[Ljava/lang/Object;)V";
			IntPtr native_format = JNIEnv.NewString ((string)format);
			IntPtr native_args = JNIEnv.NewArray (args);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue ((tag == null) ? IntPtr.Zero : ((global::Java.Lang.Object) tag).Handle);
				__args [1] = new JniArgumentValue (native_format);
				__args [2] = new JniArgumentValue (native_args);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_format);
				if (args != null) {
					JNIEnv.CopyArray (native_args, args);
					JNIEnv.DeleteLocalRef (native_args);
				}
				global::System.GC.KeepAlive (tag);
				global::System.GC.KeepAlive (args);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='apptentive.com.android.util']/class[@name='Log']/method[@name='e' and count(parameter)=2 and parameter[1][@type='apptentive.com.android.util.LogTag'] and parameter[2][@type='java.lang.String']]"
		[Register ("e", "(Lapptentive/com/android/util/LogTag;Ljava/lang/String;)V", "")]
		public static unsafe void E (global::Apptentive.Com.Android.Util.LogTag tag, string message)
		{
			const string __id = "e.(Lapptentive/com/android/util/LogTag;Ljava/lang/String;)V";
			IntPtr native_message = JNIEnv.NewString ((string)message);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((tag == null) ? IntPtr.Zero : ((global::Java.Lang.Object) tag).Handle);
				__args [1] = new JniArgumentValue (native_message);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_message);
				global::System.GC.KeepAlive (tag);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='apptentive.com.android.util']/class[@name='Log']/method[@name='e' and count(parameter)=3 and parameter[1][@type='apptentive.com.android.util.LogTag'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='java.lang.Throwable']]"
		[Register ("e", "(Lapptentive/com/android/util/LogTag;Ljava/lang/String;Ljava/lang/Throwable;)V", "")]
		public static unsafe void E (global::Apptentive.Com.Android.Util.LogTag tag, string message, global::Java.Lang.Throwable e)
		{
			const string __id = "e.(Lapptentive/com/android/util/LogTag;Ljava/lang/String;Ljava/lang/Throwable;)V";
			IntPtr native_message = JNIEnv.NewString ((string)message);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue ((tag == null) ? IntPtr.Zero : ((global::Java.Lang.Object) tag).Handle);
				__args [1] = new JniArgumentValue (native_message);
				__args [2] = new JniArgumentValue ((e == null) ? IntPtr.Zero : ((global::Java.Lang.Throwable) e).Handle);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_message);
				global::System.GC.KeepAlive (tag);
				global::System.GC.KeepAlive (e);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='apptentive.com.android.util']/class[@name='Log']/method[@name='e' and count(parameter)=4 and parameter[1][@type='apptentive.com.android.util.LogTag'] and parameter[2][@type='java.lang.Throwable'] and parameter[3][@type='java.lang.String'] and parameter[4][@type='java.lang.Object...']]"
		[Register ("e", "(Lapptentive/com/android/util/LogTag;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V", "")]
		public static unsafe void E (global::Apptentive.Com.Android.Util.LogTag tag, global::Java.Lang.Throwable e, string format, params global::Java.Lang.Object[] args)
		{
			const string __id = "e.(Lapptentive/com/android/util/LogTag;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V";
			IntPtr native_format = JNIEnv.NewString ((string)format);
			IntPtr native_args = JNIEnv.NewArray (args);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue ((tag == null) ? IntPtr.Zero : ((global::Java.Lang.Object) tag).Handle);
				__args [1] = new JniArgumentValue ((e == null) ? IntPtr.Zero : ((global::Java.Lang.Throwable) e).Handle);
				__args [2] = new JniArgumentValue (native_format);
				__args [3] = new JniArgumentValue (native_args);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_format);
				if (args != null) {
					JNIEnv.CopyArray (native_args, args);
					JNIEnv.DeleteLocalRef (native_args);
				}
				global::System.GC.KeepAlive (tag);
				global::System.GC.KeepAlive (e);
				global::System.GC.KeepAlive (args);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='apptentive.com.android.util']/class[@name='Log']/method[@name='getMessagesWithTags' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='apptentive.com.android.util.LogTag']]"
		[Register ("getMessagesWithTags", "(Ljava/lang/String;Lapptentive/com/android/util/LogTag;)Ljava/util/List;", "")]
		public unsafe global::System.Collections.Generic.IList<string> GetMessagesWithTags (string message, global::Apptentive.Com.Android.Util.LogTag tag)
		{
			const string __id = "getMessagesWithTags.(Ljava/lang/String;Lapptentive/com/android/util/LogTag;)Ljava/util/List;";
			IntPtr native_message = JNIEnv.NewString ((string)message);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_message);
				__args [1] = new JniArgumentValue ((tag == null) ? IntPtr.Zero : ((global::Java.Lang.Object) tag).Handle);
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, __args);
				return global::Android.Runtime.JavaList<string>.FromJniHandle (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_message);
				global::System.GC.KeepAlive (tag);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='apptentive.com.android.util']/class[@name='Log']/method[@name='i' and count(parameter)=2 and parameter[1][@type='apptentive.com.android.util.LogTag'] and parameter[2][@type='java.lang.String']]"
		[Register ("i", "(Lapptentive/com/android/util/LogTag;Ljava/lang/String;)V", "")]
		public static unsafe void I (global::Apptentive.Com.Android.Util.LogTag tag, string message)
		{
			const string __id = "i.(Lapptentive/com/android/util/LogTag;Ljava/lang/String;)V";
			IntPtr native_message = JNIEnv.NewString ((string)message);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((tag == null) ? IntPtr.Zero : ((global::Java.Lang.Object) tag).Handle);
				__args [1] = new JniArgumentValue (native_message);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_message);
				global::System.GC.KeepAlive (tag);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='apptentive.com.android.util']/class[@name='Log']/method[@name='v' and count(parameter)=2 and parameter[1][@type='apptentive.com.android.util.LogTag'] and parameter[2][@type='java.lang.String']]"
		[Register ("v", "(Lapptentive/com/android/util/LogTag;Ljava/lang/String;)V", "")]
		public static unsafe void V (global::Apptentive.Com.Android.Util.LogTag tag, string message)
		{
			const string __id = "v.(Lapptentive/com/android/util/LogTag;Ljava/lang/String;)V";
			IntPtr native_message = JNIEnv.NewString ((string)message);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((tag == null) ? IntPtr.Zero : ((global::Java.Lang.Object) tag).Handle);
				__args [1] = new JniArgumentValue (native_message);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_message);
				global::System.GC.KeepAlive (tag);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='apptentive.com.android.util']/class[@name='Log']/method[@name='v' and count(parameter)=3 and parameter[1][@type='apptentive.com.android.util.LogTag'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='java.lang.Object...']]"
		[Register ("v", "(Lapptentive/com/android/util/LogTag;Ljava/lang/String;[Ljava/lang/Object;)V", "")]
		public static unsafe void V (global::Apptentive.Com.Android.Util.LogTag tag, string format, params global::Java.Lang.Object[] args)
		{
			const string __id = "v.(Lapptentive/com/android/util/LogTag;Ljava/lang/String;[Ljava/lang/Object;)V";
			IntPtr native_format = JNIEnv.NewString ((string)format);
			IntPtr native_args = JNIEnv.NewArray (args);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue ((tag == null) ? IntPtr.Zero : ((global::Java.Lang.Object) tag).Handle);
				__args [1] = new JniArgumentValue (native_format);
				__args [2] = new JniArgumentValue (native_args);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_format);
				if (args != null) {
					JNIEnv.CopyArray (native_args, args);
					JNIEnv.DeleteLocalRef (native_args);
				}
				global::System.GC.KeepAlive (tag);
				global::System.GC.KeepAlive (args);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='apptentive.com.android.util']/class[@name='Log']/method[@name='w' and count(parameter)=2 and parameter[1][@type='apptentive.com.android.util.LogTag'] and parameter[2][@type='java.lang.String']]"
		[Register ("w", "(Lapptentive/com/android/util/LogTag;Ljava/lang/String;)V", "")]
		public static unsafe void W (global::Apptentive.Com.Android.Util.LogTag tag, string message)
		{
			const string __id = "w.(Lapptentive/com/android/util/LogTag;Ljava/lang/String;)V";
			IntPtr native_message = JNIEnv.NewString ((string)message);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((tag == null) ? IntPtr.Zero : ((global::Java.Lang.Object) tag).Handle);
				__args [1] = new JniArgumentValue (native_message);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_message);
				global::System.GC.KeepAlive (tag);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='apptentive.com.android.util']/class[@name='Log']/method[@name='w' and count(parameter)=3 and parameter[1][@type='apptentive.com.android.util.LogTag'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='java.lang.Object...']]"
		[Register ("w", "(Lapptentive/com/android/util/LogTag;Ljava/lang/String;[Ljava/lang/Object;)V", "")]
		public static unsafe void W (global::Apptentive.Com.Android.Util.LogTag tag, string format, params global::Java.Lang.Object[] args)
		{
			const string __id = "w.(Lapptentive/com/android/util/LogTag;Ljava/lang/String;[Ljava/lang/Object;)V";
			IntPtr native_format = JNIEnv.NewString ((string)format);
			IntPtr native_args = JNIEnv.NewArray (args);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue ((tag == null) ? IntPtr.Zero : ((global::Java.Lang.Object) tag).Handle);
				__args [1] = new JniArgumentValue (native_format);
				__args [2] = new JniArgumentValue (native_args);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_format);
				if (args != null) {
					JNIEnv.CopyArray (native_args, args);
					JNIEnv.DeleteLocalRef (native_args);
				}
				global::System.GC.KeepAlive (tag);
				global::System.GC.KeepAlive (args);
			}
		}

	}
}
