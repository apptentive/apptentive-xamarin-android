apptentive/com/android/concurrent/Executor = Apptentive.Com.Android.Concurrent.IExecutor
apptentive/com/android/concurrent/ExecutorQueue = Apptentive.Com.Android.Concurrent.ExecutorQueue
  <init>(Ljava/lang/String;)V = .ctor(string)
  Companion = Companion
  isCurrent()Z = IsCurrent
  stop()V = Stop()
apptentive/com/android/concurrent/Executors = Apptentive.Com.Android.Concurrent.Executors
  <init>(Lapptentive/com/android/concurrent/Executor;Lapptentive/com/android/concurrent/Executor;)V = .ctor(Apptentive.Com.Android.Concurrent.IExecutor, Apptentive.Com.Android.Concurrent.IExecutor)
  getMain()Lapptentive/com/android/concurrent/Executor; = Main
  getState()Lapptentive/com/android/concurrent/Executor; = State
  component1()Lapptentive/com/android/concurrent/Executor; = Component1()
  component2()Lapptentive/com/android/concurrent/Executor; = Component2()
  copy(Lapptentive/com/android/concurrent/Executor;Lapptentive/com/android/concurrent/Executor;)Lapptentive/com/android/concurrent/Executors; = Copy(Apptentive.Com.Android.Concurrent.IExecutor, Apptentive.Com.Android.Concurrent.IExecutor)
apptentive/com/android/concurrent/SerialExecutorQueue = Apptentive.Com.Android.Concurrent.SerialExecutorQueue
  <init>(Ljava/lang/String;)V = .ctor(string)
  isCurrent()Z = IsCurrent
  stop()V = Stop()
apptentive/com/android/core/AndroidApplicationInfo = ApptentiveCore.AndroidApplicationInfo
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  getVersionCode()I = VersionCode
  getVersionName()Ljava/lang/String; = VersionName
apptentive/com/android/core/AndroidExecutorFactoryProvider = ApptentiveCore.AndroidExecutorFactoryProvider
  <init>()V = .ctor()
  get()Lapptentive/com/android/core/ExecutorFactory; = Get()
apptentive/com/android/core/AndroidLoggerProvider = ApptentiveCore.AndroidLoggerProvider
  <init>(Ljava/lang/String;)V = .ctor(string)
  get()Lapptentive/com/android/core/Logger; = Get()
apptentive/com/android/core/ApplicationInfo = ApptentiveCore.IApplicationInfo
  getVersionCode()I = VersionCode
  getVersionName()Ljava/lang/String; = VersionName
apptentive/com/android/core/BehaviorSubject = ApptentiveCore.BehaviorSubject
  <init>(Ljava/lang/Object;)V = .ctor(Java.Lang.Object)
  setValue(Ljava/lang/Object;)V = SetValue(Java.Lang.Object)
apptentive/com/android/core/BuildConfig = ApptentiveCore.BuildConfig
  <init>()V = .ctor()
  BUILD_TYPE = BuildType
  DEBUG = Debug
  LIBRARY_PACKAGE_NAME = LibraryPackageName
apptentive/com/android/core/Converter = ApptentiveCore.IConverter
  convert(Ljava/lang/Object;)Ljava/lang/Object; = Convert(Java.Lang.Object)
apptentive/com/android/core/DefaultTimeSource = ApptentiveCore.DefaultTimeSource
  INSTANCE = Instance
  getTimeSeconds()D = TimeSeconds
apptentive/com/android/core/DependencyProvider = ApptentiveCore.DependencyProvider
  INSTANCE = Instance
  getLookup()Ljava/util/Map; = Lookup
  clear()V = Clear()
apptentive/com/android/core/ExecutorFactory = ApptentiveCore.IExecutorFactory
  createConcurrentQueue(Ljava/lang/String;Ljava/lang/Integer;)Lapptentive/com/android/concurrent/ExecutorQueue; = CreateConcurrentQueue(string, Java.Lang.Integer)
  createMainQueue()Lapptentive/com/android/concurrent/ExecutorQueue; = CreateMainQueue()
  createSerialQueue(Ljava/lang/String;)Lapptentive/com/android/concurrent/ExecutorQueue; = CreateSerialQueue(string)
apptentive/com/android/core/Logger = ApptentiveCore.ILogger
  isMainQueue()Z = IsMainQueue
  log(Lapptentive/com/android/util/LogLevel;Ljava/lang/String;)V = Log(Apptentive.Com.Android.Util.LogLevel, string)
  log(Lapptentive/com/android/util/LogLevel;Ljava/lang/Throwable;)V = Log(Apptentive.Com.Android.Util.LogLevel, Java.Lang.Throwable)
apptentive/com/android/core/Observable = ApptentiveCore.Observable
  <init>(Ljava/lang/Object;)V = .ctor(Java.Lang.Object)
  getValue()Ljava/lang/Object; = Value
  setValue(Ljava/lang/Object;)V = SetValue(Java.Lang.Object)
apptentive/com/android/core/Provider = ApptentiveCore.IProvider
  get()Ljava/lang/Object; = Get()
apptentive/com/android/core/Subscription = ApptentiveCore.ISubscription
  unsubscribe()V = Unsubscribe()
apptentive/com/android/core/TimeSource = ApptentiveCore.ITimeSource
  getTimeSeconds()D = TimeSeconds
apptentive/com/android/core/TypeAliasesKt = ApptentiveCore.TypeAliasesKt
  getTimeSeconds()D = TimeSeconds
  getUtcOffset()I = UtcOffset
  format(DI)Ljava/lang/String; = Format(double, int)
  isInThePast(D)Z = IsInThePast(double)
  toMilliseconds(D)J = ToMilliseconds(double)
  toSeconds(J)D = ToSeconds(long)
apptentive/com/android/debug/Assert = Apptentive.Com.Android.Debug.Assert
  INSTANCE = Instance
  assertEqual(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/String;)V = AssertEqual(Java.Lang.Object, Java.Lang.Object, string)
  assertFalse(ZLjava/lang/String;)V = AssertFalse(bool, string)
  assertTrue(ZLjava/lang/String;)V = AssertTrue(bool, string)
apptentive/com/android/encryption/AESEncryption23 = Apptentive.Com.Android.Encryption.AESEncryption23
  <init>(Lapptentive/com/android/encryption/EncryptionKey;)V = .ctor(Apptentive.Com.Android.Encryption.EncryptionKey)
  CIPHER_CHUNK = CipherChunk
  IV_LENGTH = IvLength
  decrypt([B)[B = Decrypt(byte[])
  decrypt(Ljava/io/InputStream;)[B = Decrypt(System.IO.Stream)
  encrypt([B)[B = Encrypt(byte[])
apptentive/com/android/encryption/Encrypted = Apptentive.Com.Android.Encryption.Encrypted
  INSTANCE = Instance
apptentive/com/android/encryption/Encryption = Apptentive.Com.Android.Encryption.IEncryption
  decrypt([B)[B = Decrypt(byte[])
  decrypt(Ljava/io/InputStream;)[B = Decrypt(System.IO.Stream)
  encrypt([B)[B = Encrypt(byte[])
apptentive/com/android/encryption/EncryptionFactory = Apptentive.Com.Android.Encryption.EncryptionFactory
  <init>()V = .ctor()
  Companion = Companion
apptentive/com/android/encryption/EncryptionKey = Apptentive.Com.Android.Encryption.EncryptionKey
  <init>()V = .ctor()
  <init>(Ljavax/crypto/SecretKey;Ljava/lang/String;)V = .ctor(Javax.Crypto.ISecretKey, string)
  Companion = Companion
  getKey()Ljavax/crypto/SecretKey; = Key
  getTransformation()Ljava/lang/String; = Transformation
  component1()Ljavax/crypto/SecretKey; = Component1()
  component2()Ljava/lang/String; = Component2()
  copy(Ljavax/crypto/SecretKey;Ljava/lang/String;)Lapptentive/com/android/encryption/EncryptionKey; = Copy(Javax.Crypto.ISecretKey, string)
apptentive/com/android/encryption/EncryptionNoOp = Apptentive.Com.Android.Encryption.EncryptionNoOp
  <init>()V = .ctor()
  decrypt([B)[B = Decrypt(byte[])
  decrypt(Ljava/io/InputStream;)[B = Decrypt(System.IO.Stream)
  encrypt([B)[B = Encrypt(byte[])
apptentive/com/android/encryption/EncryptionStatus = Apptentive.Com.Android.Encryption.EncryptionStatus
apptentive/com/android/encryption/EncryptionStatusKt = Apptentive.Com.Android.Encryption.EncryptionStatusKt
  getEncryptionStatus(Z)Lapptentive/com/android/encryption/EncryptionStatus; = GetEncryptionStatus(bool)
apptentive/com/android/encryption/KeyResolver = Apptentive.Com.Android.Encryption.IKeyResolver
  resolveKey()Lapptentive/com/android/encryption/EncryptionKey; = ResolveKey()
apptentive/com/android/encryption/KeyResolverFactory = Apptentive.Com.Android.Encryption.KeyResolverFactory
  <init>()V = .ctor()
  Companion = Companion
apptentive/com/android/encryption/NoEncryptionStatus = Apptentive.Com.Android.Encryption.NoEncryptionStatus
  INSTANCE = Instance
apptentive/com/android/encryption/NotEncrypted = Apptentive.Com.Android.Encryption.NotEncrypted
  INSTANCE = Instance
apptentive/com/android/feedback/platform/TryStartActivityKt = Apptentive.Com.Android.Feedback.Platform.TryStartActivityKt
  tryStartActivity(Landroid/content/Context;Landroid/content/Intent;)Z = TryStartActivity(Android.Content.Context, Android.Content.Intent)
apptentive/com/android/platform/AndroidSharedPrefDataStore = Apptentive.Com.Android.Platform.IAndroidSharedPrefDataStore
  containsKey(Ljava/lang/String;Ljava/lang/String;)Z = ContainsKey(string, string)
  getBoolean(Ljava/lang/String;Ljava/lang/String;Z)Z = GetBoolean(string, string, bool)
  getSharedPrefForSDK(Ljava/lang/String;)Landroid/content/SharedPreferences; = GetSharedPrefForSDK(string)
  getString(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = GetString(string, string, string)
  putBoolean(Ljava/lang/String;Ljava/lang/String;Z)V = PutBoolean(string, string, bool)
  putString(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = PutString(string, string, string)
apptentive/com/android/platform/DefaultAndroidSharedPrefDataStore = Apptentive.Com.Android.Platform.DefaultAndroidSharedPrefDataStore
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  getContext()Landroid/content/Context; = Context
  containsKey(Ljava/lang/String;Ljava/lang/String;)Z = ContainsKey(string, string)
  getBoolean(Ljava/lang/String;Ljava/lang/String;Z)Z = GetBoolean(string, string, bool)
  getSharedPrefForSDK(Ljava/lang/String;)Landroid/content/SharedPreferences; = GetSharedPrefForSDK(string)
  getString(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = GetString(string, string, string)
  putBoolean(Ljava/lang/String;Ljava/lang/String;Z)V = PutBoolean(string, string, bool)
  putString(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = PutString(string, string, string)
apptentive/com/android/platform/SharedPrefConstants = Apptentive.Com.Android.Platform.SharedPrefConstants
  APPTENTIVE = Apptentive
  APPTENTIVE_KEY_HASH = ApptentiveKeyHash
  APPTENTIVE_SIGNATURE_HASH = ApptentiveSignatureHash
  CONVERSATION_RESET_THROTTLE = ConversationResetThrottle
  CRYPTO_ENABLED = CryptoEnabled
  CRYPTO_KEY_ALIAS = CryptoKeyAlias
  CUSTOM_STORE_URL = CustomStoreUrl
  CUSTOM_STORE_URL_KEY = CustomStoreUrlKey
  INSTANCE = Instance
  INTERACTION_BACKUP = InteractionBackup
  MESSAGE_CENTER_DRAFT = MessageCenterDraft
  MESSAGE_CENTER_DRAFT_ATTACHMENTS = MessageCenterDraftAttachments
  MESSAGE_CENTER_DRAFT_TEXT = MessageCenterDraftText
  MESSAGE_CENTER_PROFILE_EMAIL = MessageCenterProfileEmail
  MESSAGE_CENTER_PROFILE_NAME = MessageCenterProfileName
  POST_NOTIFICATIONS = PostNotifications
  PREF_KEY_PUSH_PROVIDER = PrefKeyPushProvider
  PREF_KEY_PUSH_TOKEN = PrefKeyPushToken
  REGISTRATION_INFO = RegistrationInfo
  SDK_CORE_INFO = SdkCoreInfo
  THROTTLE_UTILS = ThrottleUtils
  USE_HOST_APP_THEME = UseHostAppTheme
  USE_HOST_APP_THEME_KEY = UseHostAppThemeKey
apptentive/com/android/util/Factory = Apptentive.Com.Android.Util.IFactory
  create()Ljava/lang/Object; = Create()
apptentive/com/android/util/InternalUseOnly = Apptentive.Com.Android.Util.IInternalUseOnly
apptentive/com/android/util/ListExtensionsKt = Apptentive.Com.Android.Util.ListExtensionsKt
  copyAndAdd(Ljava/util/List;Ljava/lang/Object;)Ljava/util/List; = CopyAndAdd(System.Collections.IList, Java.Lang.Object)
  isSame(Ljava/util/List;Ljava/util/List;)Z = IsSame(System.Collections.IList, System.Collections.IList)
apptentive/com/android/util/Log = Apptentive.Com.Android.Util.Log
  INSTANCE = Instance
  getLogger()Lapptentive/com/android/core/Logger; = Logger
  getLogLevel()Lapptentive/com/android/util/LogLevel; = LogLevel
  setLogLevel(Lapptentive/com/android/util/LogLevel;)V = LogLevel
  canLog(Lapptentive/com/android/util/LogLevel;)Z = CanLog(Apptentive.Com.Android.Util.LogLevel)
  d(Lapptentive/com/android/util/LogTag;Ljava/lang/String;)V = D(Apptentive.Com.Android.Util.LogTag, string)
  d(Lapptentive/com/android/util/LogTag;Ljava/lang/String;[Ljava/lang/Object;)V = D(Apptentive.Com.Android.Util.LogTag, string, params Java.Lang.Object[])
  e(Lapptentive/com/android/util/LogTag;Ljava/lang/String;)V = E(Apptentive.Com.Android.Util.LogTag, string)
  e(Lapptentive/com/android/util/LogTag;Ljava/lang/String;Ljava/lang/Throwable;)V = E(Apptentive.Com.Android.Util.LogTag, string, Java.Lang.Throwable)
  e(Lapptentive/com/android/util/LogTag;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V = E(Apptentive.Com.Android.Util.LogTag, Java.Lang.Throwable, string, params Java.Lang.Object[])
  getMessagesWithTags(Ljava/lang/String;Lapptentive/com/android/util/LogTag;)Ljava/util/List; = GetMessagesWithTags(string, Apptentive.Com.Android.Util.LogTag)
  i(Lapptentive/com/android/util/LogTag;Ljava/lang/String;)V = I(Apptentive.Com.Android.Util.LogTag, string)
  v(Lapptentive/com/android/util/LogTag;Ljava/lang/String;)V = V(Apptentive.Com.Android.Util.LogTag, string)
  v(Lapptentive/com/android/util/LogTag;Ljava/lang/String;[Ljava/lang/Object;)V = V(Apptentive.Com.Android.Util.LogTag, string, params Java.Lang.Object[])
  w(Lapptentive/com/android/util/LogTag;Ljava/lang/String;)V = W(Apptentive.Com.Android.Util.LogTag, string)
  w(Lapptentive/com/android/util/LogTag;Ljava/lang/String;[Ljava/lang/Object;)V = W(Apptentive.Com.Android.Util.LogTag, string, params Java.Lang.Object[])
apptentive/com/android/util/LogLevel = Apptentive.Com.Android.Util.LogLevel
  Debug = Debug
  Error = Error
  Info = Info
  Verbose = Verbose
  Warning = Warning
  valueOf(Ljava/lang/String;)Lapptentive/com/android/util/LogLevel; = ValueOf(string)
  values()[Lapptentive/com/android/util/LogLevel; = Values()
apptentive/com/android/util/LogTag = Apptentive.Com.Android.Util.LogTag
  <init>(Ljava/lang/String;)V = .ctor(string)
  getName()Ljava/lang/String; = Name
  component1()Ljava/lang/String; = Component1()
  copy(Ljava/lang/String;)Lapptentive/com/android/util/LogTag; = Copy(string)
apptentive/com/android/util/LogTags = Apptentive.Com.Android.Util.LogTags
  INSTANCE = Instance
  MIGRATION = Migration
  SECURITY = Security
  UTIL = Util
  getAPP_RELEASE()Lapptentive/com/android/util/LogTag; = APP_RELEASE
  getCONFIGURATION()Lapptentive/com/android/util/LogTag; = CONFIGURATION
  getCONVERSATION()Lapptentive/com/android/util/LogTag; = CONVERSATION
  getCORE()Lapptentive/com/android/util/LogTag; = CORE
  getCRITERIA()Lapptentive/com/android/util/LogTag; = CRITERIA
  getCRYPTOGRAPHY()Lapptentive/com/android/util/LogTag; = CRYPTOGRAPHY
  getDATABASE()Lapptentive/com/android/util/LogTag; = DATABASE
  getDEVICE()Lapptentive/com/android/util/LogTag; = DEVICE
  getENGAGEMENT_DATA()Lapptentive/com/android/util/LogTag; = ENGAGEMENT_DATA
  getENGAGEMENT_MANIFEST()Lapptentive/com/android/util/LogTag; = ENGAGEMENT_MANIFEST
  getEVENT()Lapptentive/com/android/util/LogTag; = EVENT
  getEVENT_NOTIFICATION()Lapptentive/com/android/util/LogTag; = EVENT_NOTIFICATION
  getFEEDBACK()Lapptentive/com/android/util/LogTag; = FEEDBACK
  getIN_APP_REVIEW()Lapptentive/com/android/util/LogTag; = IN_APP_REVIEW
  getINJECTION()Lapptentive/com/android/util/LogTag; = INJECTION
  getINTERACTIONS()Lapptentive/com/android/util/LogTag; = INTERACTIONS
  getLIFE_CYCLE_OBSERVER()Lapptentive/com/android/util/LogTag; = LIFE_CYCLE_OBSERVER
  getMESSAGE_CENTER()Lapptentive/com/android/util/LogTag; = MESSAGE_CENTER
  getMESSAGE_CENTER_HIDDEN()Lapptentive/com/android/util/LogTag; = MESSAGE_CENTER_HIDDEN
  getMESSAGE_CENTER_NOTIFICATION()Lapptentive/com/android/util/LogTag; = MESSAGE_CENTER_NOTIFICATION
  getNETWORK()Lapptentive/com/android/util/LogTag; = NETWORK
  getPAYLOADS()Lapptentive/com/android/util/LogTag; = PAYLOADS
  getPERSON()Lapptentive/com/android/util/LogTag; = PERSON
  getPROFILE_DATA_GET()Lapptentive/com/android/util/LogTag; = PROFILE_DATA_GET
  getPROFILE_DATA_UPDATE()Lapptentive/com/android/util/LogTag; = PROFILE_DATA_UPDATE
  getPUSH_NOTIFICATION()Lapptentive/com/android/util/LogTag; = PUSH_NOTIFICATION
  getRANDOM_SAMPLING()Lapptentive/com/android/util/LogTag; = RANDOM_SAMPLING
  getSDK()Lapptentive/com/android/util/LogTag; = SDK
  getSYSTEM()Lapptentive/com/android/util/LogTag; = SYSTEM
apptentive/com/android/util/MapExtensionsKt = Apptentive.Com.Android.Util.MapExtensionsKt
  getBoolean(Ljava/util/Map;Ljava/lang/String;)Z = GetBoolean(System.Collections.Generic.IDictionary<string, object>, string)
  getInt(Ljava/util/Map;Ljava/lang/String;)I = GetInt(System.Collections.Generic.IDictionary<string, object>, string)
  getList(Ljava/util/Map;Ljava/lang/String;)Ljava/util/List; = GetList(System.Collections.Generic.IDictionary<string, object>, string)
  getMap(Ljava/util/Map;Ljava/lang/String;)Ljava/util/Map; = GetMap(System.Collections.Generic.IDictionary<string, object>, string)
  getString(Ljava/util/Map;Ljava/lang/String;)Ljava/lang/String; = GetString(System.Collections.Generic.IDictionary<string, object>, string)
  optBoolean(Ljava/util/Map;Ljava/lang/String;Z)Z = OptBoolean(System.Collections.Generic.IDictionary<string, object>, string, bool)
  optInt(Ljava/util/Map;Ljava/lang/String;I)I = OptInt(System.Collections.Generic.IDictionary<string, object>, string, int)
  optMap(Ljava/util/Map;Ljava/lang/String;Ljava/util/Map;)Ljava/util/Map; = OptMap(System.Collections.Generic.IDictionary<string, object>, string, System.Collections.Generic.IDictionary<string, object>)
  optString(Ljava/util/Map;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = OptString(System.Collections.Generic.IDictionary<string, object>, string, string)
apptentive/com/android/util/MutableListExtensionsKt = Apptentive.Com.Android.Util.MutableListExtensionsKt
apptentive/com/android/util/Result = Apptentive.Com.Android.Util.Result
apptentive/com/android/util/StringUtilsKt = Apptentive.Com.Android.Util.StringUtilsKt
apptentive/com/android/util/UUIDUtils = Apptentive.Com.Android.Util.UUIDUtils
  generateUUID()Ljava/lang/String; = GenerateUUID()
